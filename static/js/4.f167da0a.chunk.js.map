{"version":3,"sources":["components/info/chart.jsx"],"names":["ChartComponent","chart","canvas","React","createRef","ctx","radius","mouseDown","center","mouseUpHandler","ev","_this","mouseDownHandle","x","clientX","y","clientY","rotateTo","Math","random","mouseMoveHandler","_assertThisInitialize","Object","C_Users_user_Desktop_uisa_uisa_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__","centerX","centerY","startX","startY","getAngle","angle","options","rotation","PI","update","this","current","clientHeight","clientWidth","width","height","getContext","Chart","type","data","datasets","backgroundColor","labels","cutoutPercentage","legend","display","title","tooltips","position","fontFamily","titleFontSize","bodyFontSize","footerFontSize","xPadding","yPadding","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","onMouseDown","onMouseUp","onMouseMove","ref","Component"],"mappings":"uOAIqBA,6MACnBC,MAAQ,OACRC,OAASC,IAAMC,cACfC,IAAM,OACNC,OAAS,IACTC,UAAY,OACZC,OAAS,OAyDTC,eAAiB,SAAAC,GACfC,EAAKJ,UAAY,QAGnBK,gBAAkB,SAAAF,GAAM,IACLG,EAAkBH,EAA3BI,QAAqBC,EAAML,EAAfM,QACpBL,EAAKJ,UAAY,CAAEM,IAAGE,KACtBJ,EAAKM,SAAyB,IAAhBC,KAAKC,aAGrBC,iBAAmB,SAAAV,GAAM,IAAAW,EAAAC,OAAAC,EAAA,EAAAD,QAAAC,EAAA,EAAAD,CAAAX,IACfH,EADea,EACfb,OAAQD,EADOc,EACPd,UAChB,GAAKA,EAFkB,KAGNM,EAAkBH,EAA3BI,QAAqBC,EAAML,EAAfM,QACTQ,EAAwBhB,EAA3BK,EAAeY,EAAYjB,EAAfO,EACTW,EAAsBnB,EAAzBM,EAAcc,EAAWpB,EAAdQ,EACLa,IACZ,CAAEf,EAAGA,EAAIW,EAAST,EAAGA,EAAIU,GACzB,CAAEZ,EAAGa,EAASF,EAAST,EAAGY,EAASF,QAMvCR,SAAW,SAAAY,GACTlB,EAAKV,MAAM6B,QAAQC,SAAYb,KAAKc,GAAKH,EAAS,IAClDlB,EAAKV,MAAMgC,6FAjFX,IAAM/B,EAASgC,KAAKhC,OAAOiC,QAC3B,GAAIjC,EAAQ,KACFkC,EAA8BlC,EAA9BkC,aAAcC,EAAgBnC,EAAhBmC,YACtBnC,EAAOoC,MAAQD,EACfnC,EAAOqC,OAASH,EAChB,IAAM/B,EAAMH,EAAOsC,WAAW,MAsB9BN,KAAKjC,MAAQ,IAAIwC,IAAMpC,EAAK,CAC1BqC,KAAM,WACNC,KAvBW,CACXC,SAAU,CACR,CACEC,gBAAiB,CACf,UACA,UACA,UACA,UACA,WAEFF,KAAM,CAAC,GAAI,GAAI,EAAG,EAAG,KAGzBG,OAAQ,CACN,0BACA,qBACA,0BACA,OACA,cAMFhB,QAAS,CACPiB,iBAAkB,GAClBC,OAAQ,CAAEC,SAAS,GACnBC,MAAO,CACLD,SAAS,EACTlB,SAAU,GAGZoB,SAAU,CACRC,SAAU,UACVC,WAAY,yBACZC,cAAe,GACfC,aAAc,GACdC,eAAgB,GAChBjB,OAAQ,GACRD,MAAO,IACPmB,SAAU,GACVC,SAAU,OAIhBxB,KAAK1B,OAAS,CAAEK,EAAGwB,EAAc,EAAGtB,EAAGqB,EAAe,qCAkCxD,OACEuB,EAAAC,EAAAC,cAAA,UACEC,YAAa5B,KAAKtB,gBAClBmD,UAAW7B,KAAKzB,eAChBuD,YAAa9B,KAAKd,iBAClB6C,IAAK/B,KAAKhC,gBAlG0BgE","file":"static/js/4.f167da0a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Chart from \"chart.js\";\r\nimport getAngle from \"angle-between-points\";\r\n\r\nexport default class ChartComponent extends Component {\r\n  chart = null;\r\n  canvas = React.createRef();\r\n  ctx = null;\r\n  radius = 0;\r\n  mouseDown = null;\r\n  center = null;\r\n  componentDidMount() {\r\n    const canvas = this.canvas.current;\r\n    if (canvas) {\r\n      const { clientHeight, clientWidth } = canvas;\r\n      canvas.width = clientWidth;\r\n      canvas.height = clientHeight;\r\n      const ctx = canvas.getContext(\"2d\");\r\n      const data = {\r\n        datasets: [\r\n          {\r\n            backgroundColor: [\r\n              \"#0e1638\",\r\n              \"#143a6b\",\r\n              \"#00ced1\",\r\n              \"#5c2477\",\r\n              \"#d04943\"\r\n            ],\r\n            data: [45, 40, 7, 5, 3]\r\n          }\r\n        ],\r\n        labels: [\r\n          \"PRE-SALE and TOKEN SALE\",\r\n          \"Future development\",\r\n          \"Frozen assets: Founders\",\r\n          \"Team\",\r\n          \"Community\"\r\n        ]\r\n      };\r\n      this.chart = new Chart(ctx, {\r\n        type: \"doughnut\",\r\n        data,\r\n        options: {\r\n          cutoutPercentage: 40,\r\n          legend: { display: false },\r\n          title: {\r\n            display: false,\r\n            rotation: 0\r\n            // text: \"Predicted world population (millions) in 2050\"\r\n          },\r\n          tooltips: {\r\n            position: \"nearest\",\r\n            fontFamily: \"raleway-ex, sans-serif\",\r\n            titleFontSize: 20,\r\n            bodyFontSize: 20,\r\n            footerFontSize: 20,\r\n            height: 40,\r\n            width: 120,\r\n            xPadding: 20,\r\n            yPadding: 20\r\n          }\r\n        }\r\n      });\r\n      this.center = { x: clientWidth / 2, y: clientHeight / 2 };\r\n    }\r\n  }\r\n\r\n  mouseUpHandler = ev => {\r\n    this.mouseDown = null;\r\n  };\r\n\r\n  mouseDownHandle = ev => {\r\n    const { clientX: x, clientY: y } = ev;\r\n    this.mouseDown = { x, y };\r\n    this.rotateTo(Math.random() * 500);\r\n  };\r\n\r\n  mouseMoveHandler = ev => {\r\n    const { center, mouseDown } = this;\r\n    if (!mouseDown) return;\r\n    const { clientX: x, clientY: y } = ev;\r\n    const { x: centerX, y: centerY } = center;\r\n    const { x: startX, y: startY } = mouseDown;\r\n    const angle = getAngle(\r\n      { x: x - centerX, y: y - centerY },\r\n      { x: startX - centerX, y: startY - centerY }\r\n    );\r\n    // this.rotateTo(angle);\r\n    // console.log(\"angle is\", angle);\r\n  };\r\n\r\n  rotateTo = angle => {\r\n    this.chart.options.rotation = (Math.PI * angle) / 180;\r\n    this.chart.update();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <canvas\r\n        onMouseDown={this.mouseDownHandle}\r\n        onMouseUp={this.mouseUpHandler}\r\n        onMouseMove={this.mouseMoveHandler}\r\n        ref={this.canvas}\r\n      />\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":""}